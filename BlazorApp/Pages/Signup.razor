@page "/signup"
@using BlazorApp.Data;
@using System.Text.RegularExpressions;
@using BlazorApp.Resources
@using BlazorApp.Validations
@inject NavigationManager Nav
@inject Utilities.ILocalStorage LocalStorage

<PageTitle>Sign Up</PageTitle>

<h1>User Sign Up</h1>
<EditForm Model="user" OnValidSubmit="SignUpAsync">
  <FluentValidationValidator TValidator="SignupValidator" />
  <ValidationSummary />
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title">Sign Up Form</h5>
    </div>
    <div class="modal-body">
      <div class="mb-3">
        <label for="loginEmail" class="form-label">User Name</label>
        <input class="form-control" id="userName" placeholder="john" autocomplete="off" required @bind-value="user.UserName" />
      </div>
      <div class="mb-3">
        <label for="loginEmail" class="form-label">Email</label>
        <input type="email" class="form-control" id="loginEmail" placeholder="name@example.com" autocomplete="off" required @bind-value="user.Email" />
      </div>
      <div class="mb-3">
        <label for="loginPassword" class="form-label">Password</label>
        <input type="password" class="form-control" id="loginPassword" required @bind-value="user.Password" />
      </div>
      <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <input type="password" class="form-control" id="confirmPassword" required />
      </div>
    </div>

    <div class="modal-footer">
      <button id="loginBtn" type="button" class="btn btn-success" @onclick="SignUpAsync">Sign Up</button>
    </div>
    <Popup @ref="popupRef" />
  </div>
</EditForm>


@code {
  public User user = new User
    {
      Email = string.Empty,
      Password = string.Empty,
      UserName=string.Empty
    };
  private Popup popupRef;

  public async Task SignUpAsync()
  {
    if (!IsValid())
    {
      popupRef.Show(Messages.SignupError);
      return;
    }

    Nav.NavigateTo("/counter");
    await LocalStorage.SaveStringAsync("user", user.Email);
  }

  private bool IsValid() => !string.IsNullOrEmpty(user.UserName) &&
  !string.IsNullOrEmpty(user.Email) &&
  !string.IsNullOrEmpty(user.Password) &&
  Regex.IsMatch(user.Email, Constants.EmailRegex, RegexOptions.IgnoreCase);

}
